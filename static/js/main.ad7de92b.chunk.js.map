{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","covidData","country","cases","active","new","recovered","total","CardList","map","covid","key","indexOf","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","process","then","response","json","info","data","setState","catch","err","console","log","this","filteredCountry","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6UAGaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBAEX,yCAAeD,EAAME,UAAUC,SAC/B,4CAAkBH,EAAME,UAAUE,MAAMC,QACxC,0CAAgBL,EAAME,UAAUE,MAAME,KACtC,0CAAgBN,EAAME,UAAUE,MAAMG,WACtC,sCAAYP,EAAME,UAAUE,MAAMI,UCN7BC,EAAW,SAAAT,GAAK,OACzB,yBAAKC,UAAW,aAERD,EAAME,UAAUQ,KAAI,SAAAC,GAAK,OACrB,kBAAC,EAAD,CAAMC,IAAKD,EAAME,QAASX,UAAaS,SCL1CG,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6CHG,G,wDA7Cb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXlB,UAAY,GACZmB,YAAc,IAJL,E,gEAQO,IAAD,OACjBC,MAAM,8CAA+C,CACnD,OAAU,MACV,QAAW,CACT,kBAAmB,2BACnB,iBAAkBC,wDAGrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIA,EAAKF,YAClBD,MAAK,SAAAI,GAAS,EAAKC,SAAS,CAAC3B,UAAY0B,OACzCE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAIP,IAAD,SAC6BG,KAAKd,MAAhClB,EADF,EACEA,UAAWmB,EADb,EACaA,YACbc,EAAkBjC,EAAUkC,QAAO,SAAAlC,GAAS,OAAGA,EAAUC,QAAQkC,cAAcC,SAASjB,EAAYgB,kBAE1G,OAEE,yBAAKpC,UAAU,OACb,gDACA,kBAAC,EAAD,CACCc,YAAc,UACdC,aAAiB,SAAAuB,GAAC,OAAI,EAAKV,SAAS,CAAER,YAAckB,EAAEC,OAAOC,WAG9D,kBAAC,EAAD,CAAUvC,UAAaiC,IAPzB,U,GA/BYO,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.ad7de92b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props=>(\r\n    <div className='card-container'>\r\n        \r\n        <h2>Country : {props.covidData.country}</h2>\r\n        <p>Active cases :{props.covidData.cases.active}</p>\r\n        <p>New cases : {props.covidData.cases.new}</p>\r\n        <p>Recovered : {props.covidData.cases.recovered}</p>\r\n        <p>Total : {props.covidData.cases.total}</p>\r\n\r\n    </div>\r\n)","import React from  'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className ='card-list'>\r\n        {\r\n            props.covidData.map(covid => (\r\n                <Card key={covid.indexOf} covidData = {covid}/>               \r\n            ))         \r\n        }       \r\n    </div> \r\n)","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=>(    \r\n    <input \r\n        className=\"search\"\r\n        type=\"search\" \r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n   \r\n)","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n// import { render } from 'react-dom';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      covidData : [],\n      searchField : ''\n    }\n  }\n  \n  componentDidMount(){\n    fetch(\"https://covid-193.p.rapidapi.com/statistics\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n        \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\n      }\n    })\n    .then(response => response.json())\n    .then(info => info.response)\n    .then(data => {this.setState({covidData : data})} )\n    .catch(err => {\n      console.log(err);\n    });\n  }\n  \n  render(){\n    const { covidData, searchField } = this.state;\n    const filteredCountry = covidData.filter(covidData=> covidData.country.toLowerCase().includes(searchField.toLowerCase()))\n   \n    return(\n      \n      <div className=\"App\">\n        <h1>COVID-19 Tracker</h1>\n        <SearchBox\n         placeholder = 'Country' \n         handleChange = { e => this.setState({ searchField : e.target.value})}\n        />\n        \n        <CardList covidData = {filteredCountry} />  {/**prop is object of any properties that you write on this component */}\n        {/**this is called children, the main properties that exit on props (anything in between barkets of our component)*/}\n        \n      \n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}